MVC
	视图(View)-对应组件：JSP或者HTML文件
	控制器(Controller)-对应组件：Servlet
	模型(Model) -对应组件：JavaBean

优点:

java Web应用开发中有两种设计模型，为了方便，分别成为模型1和模型2。
	JSP Model1 是以页面为中心，适合小应用开发。
	JSP Model2 基于MVC模式，是javaWeb应用推荐的架构。
		JSP：负责生成动态网页
		Servlet：负责流程控制
		JavaBean：负责业务逻辑处理
	

springMVC
	是spring框架中用于快速开发的一个模块，其中的MVC是Model-View-Controller的缩写。
	作为当今业界最主流的Web开发框架，springMVC已经成为当前最热门的开发技能，同时也广泛用于桌面开发领域
																			---《springMVC开发指南》
																			
springMVC请求处理流程
	见图	
	
springMVC体系结构
	DispatcherServlet(前端控制器)
		Spring MVC最核心的类
		web.xml中配置
	Handler(处理器)：对应MVC中C(Controller层)
		作用：实际处理请求
		标注了@RequestMapping的所有方法都可以看作是一个Handler
	ModelAndView
		逻辑视图名
		模型对象

springMVC工作流程	
	① DispatcherServlet	解析请求URL
	② 调用 HandlerMapping 获得该 Handler 配置的所有相关的对象
	③ 根据获得的Handler，选择一个合适的HandlerAdapter
	④ 提取Request中的模型数据，填充Handler入参，开始执行Handler(Controller)
		HttpMessageConveter
		在填充Handler的入参过程中,你可以
			将请求消息(如Json、xml等数据)转换成一个对象，
			数据转换：对请求消息进行数据转换。如String转换成Integer、Double等
			数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等
			数据验证： 验证数据的有效性(长度、格式等)，验证结果存储到BindingResult或Error中
	⑤ Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象
	⑥ 根据返回的ModelAndView，选择一个适合的ViewResolver返回给DispatcherServlet
	⑦ ViewResolver 结合Model和View，来渲染视图
	⑧ 将渲染结果返回给客户端	
	
springMVC环境搭建	
	1.在web.xml中配置spring mvc核心servlet
		包扫描
		视图解析器
	2.配置dispathcer-servlet.xml
		DispatcherServlet初始化时，会寻找WEB-INF下的xxx-servlet.xml，
	  	其中xxx为xml中配置的DispatcherServlet的名字
	  	也可以使用init-param元素指定xxx-servlet.xml的位置(推荐)
	3.编写一个Controller
	



http请求地址映射  http://localhost:8080/springmvc/a/b
	@Controller
	@RequestMapping("a")
	class XXX{
		
		@RequestMapping("b")
		String m(){}
	}
	
														